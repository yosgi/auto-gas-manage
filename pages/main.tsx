import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import * as React from 'react';
import { JsonRpcSigner } from "@ethersproject/providers";
import Box from '@mui/material/Box';
import { contractABI } from '../constant'
import AppBar from '@mui/material/AppBar';
import Typography from '@mui/material/Typography';
import Toolbar from '@mui/material/Toolbar';
import IconButton from '@mui/material/IconButton'
import Button from '@mui/material/Button';
import Switch from '@mui/material/Switch';
import OutlinedInput from '@mui/material/OutlinedInput';
import { FormGroup,FormControlLabel } from '@mui/material';
import { useEthers, useEtherBalance } from "@usedapp/core";
import FormControl from '@mui/material/FormControl';
import Card from '@mui/material/Card';
import CardActions from '@mui/material/CardActions';
import CardContent from '@mui/material/CardContent';
import InputLabel from '@mui/material/InputLabel';
interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}
interface AccountProps {
  account: string;
  [key:string]: any;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          <Typography>{children}</Typography>
        </Box>
      )}
    </div>
  );
}

const Home: NextPage = () => {
  const [ETHvalue, setEthValue] = React.useState<Boolean>(false);
  const [BSCvalue, setBscValue] = React.useState<Boolean>(false);
  const { activateBrowserWallet, account, library } = useEthers();
  const [signer, setSigner] = React.useState<undefined | JsonRpcSigner>(undefined);
  let balances:AccountProps[] = [1,2,3,4,5].map(() => {
    return {
      account:'',
      bsc:false,
      eth:false,
    }
  });
  const [balance, setBalance] = React.useState(balances);
  console.log(balance);
  // const handleChange = async (e: React.ChangeEvent, checked:Boolean, type: string) => {
  //   type === 'bsc' ? setBscValue(checked):setEthValue(checked)
  //   let res = await fetch("/api/process", {
  //     method: "POST",
  //     body: JSON.stringify([{
  //       bsc:type === 'bsc' ? checked:BSCvalue,
  //       eth:type === 'eth' ? checked:ETHvalue,
  //       account:'64a50d67e9589a3bb06b86262771dc48d963a11d34dcb8f064faa4885d311ae4'
  //     }]),
  //     headers:
  //     {
  //         "Content-Type":
  //         "application/json",
  //     },
  // });
  // const data = await res.json();
  // console.log(data)
  // };
  const handleAccount = async (account:string,index:number) => {
    let balances = [...balance];
    balances[index].account = account;
    setBalance(balances);
  }
  const handleType = async (type:string,status:Boolean,index:number) => {
    let balances = [...balance];
    if (balances[index]) {
      balances[index][type] = status;
    }
    setBalance(balances);
  }
  const handleSubmit = async () => {
      const body = balance.filter((item) => {
        return item.account && (item.bsc || item.eth)
      })
      let res = await fetch("/api/process", {
        method: "POST",
        body: JSON.stringify(body),
        headers:
        {
            "Content-Type":
            "application/json",
        },
    });
    const data = await res.json();
    console.log(data)
  }
  console.log(balance);
  function valuetext(value: number) {
    return `${value}`;
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Mint NFT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppBar position="static">
          <Toolbar sx={{display:'flex',justifyContent:'space-between'}}>
            <IconButton
              size="large"
              edge="start"
              color="inherit"
              aria-label="menu"
              sx={{ mr: 2 }}
            >
              Mint NFT
            </IconButton>
          </Toolbar>
      </AppBar>
      <Box sx={{display: 'flex',width: '80%',flexWrap:'wrap',justifyContent: 'spcace-around',margin:'auto'}}>
      {/* 64a50d67e9589a3bb06b86262771dc48d963a11d34dcb8f064faa4885d311ae4 */}
      {
        balance.map((item, index) => {
          return (
            <Card key={index} sx={{width:350,marginTop:5,marginRight:3}}>
              <CardContent>
                 
                  <FormControl sx={{ m: 1, width: 300 }} variant="outlined">
                  <InputLabel >account{index + 1}</InputLabel>
                      <OutlinedInput
                        id="account"
                        aria-describedby="Input account"
                        inputProps={{
                          'aria-label': 'weight',
                        }}
                        onChange={(e) => handleAccount(e.target.value,index)}
                      />
                  </FormControl>
                  </CardContent>

                  <CardActions  sx={{display:'flex'}}>
                    <FormControlLabel control={<Switch onChange={(event:React.ChangeEvent,checked:Boolean) => handleType('eth',checked,index)}/>} label="ETH" />
                    <FormControlLabel control={<Switch onChange={(event:React.ChangeEvent,checked:Boolean) => handleType('bsc',checked,index)}/>} label="BSC" />
                  </CardActions >
      
            </Card>
          )
        })
      }
        
      </Box>
      <Button onClick={handleSubmit} sx={{width:200,margin:'auto',marginTop:5,display:'block'}}  variant="contained"> Submit </Button>
    </div>
  )
}

export default Home
